from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import unittest
import os
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class OpenBMCTest(unittest.TestCase):

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º."""
        print("üöÄ –ó–∞–ø—É—Å–∫ Firefox –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        firefox_options = Options()
        
        # ‚ö†Ô∏è –£–ë–ò–†–ê–ï–ú headless —Ä–µ–∂–∏–º - –±—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω!
        # firefox_options.add_argument('--headless')
        
        firefox_options.add_argument('--no-sandbox')
        firefox_options.add_argument('--disable-dev-shm-usage')
        firefox_options.add_argument('--width=1200')
        firefox_options.add_argument('--height=800')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è SSL –æ—à–∏–±–æ–∫
        firefox_options.set_preference('accept_insecure_certs', True)
        firefox_options.set_preference('webdriver_accept_untrusted_certs', True)
        firefox_options.set_preference('webdriver_assume_untrusted_issuer', True)
        
        # –£–≤–µ–ª–∏—á–∏–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        firefox_options.set_preference('dom.max_script_run_time', 30)
        firefox_options.set_preference('dom.max_chrome_script_run_time', 30)
        
        # –£–∫–∞–∂–∏—Ç–µ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø—É—Ç—å –∫ geckodriver
        geckodriver_path = os.path.join(os.path.expanduser('~'), '–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª', 'AquariusTesting', 'geckodriver')
        print(f"üõ†Ô∏è  –ü—É—Ç—å –∫ geckodriver: {geckodriver_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(geckodriver_path):
            print(f"‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª {geckodriver_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("üìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("cd ~/–†–∞–±–æ—á–∏–π\\ —Å—Ç–æ–ª/AquariusTesting/")
            print("wget https://github.com/mozilla/geckodriver/releases/download/v0.34.0/geckodriver-v0.34.0-linux64.tar.gz")
            print("tar -xzf geckodriver-v0.34.0-linux64.tar.gz")
            print("chmod +x geckodriver")
            raise FileNotFoundError(f"GeckoDriver –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {geckodriver_path}")
        
        service = Service(executable_path=geckodriver_path)
        
        try:
            self.driver = webdriver.Firefox(service=service, options=firefox_options)
            print("‚úÖ Firefox –±—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Firefox: {e}")
            raise
        
        self.driver.implicitly_wait(20)
        self.base_url = "https://localhost:2443"
        self.wait = WebDriverWait(self.driver, 30)
        
        # –£–≤–µ–ª–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        self.driver.set_window_size(1200, 800)

    def tearDown(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        if hasattr(self, 'driver') and self.driver:
            print("üîö –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
            self.driver.quit()

    def accept_ssl_certificate(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏."""
        print("üîí –û–±—Ä–∞–±–æ—Ç–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...")
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ 'Advanced'
            advanced_button = self.wait.until(
                EC.element_to_be_clickable((By.ID, "advancedButton"))
            )
            print("üìç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 'Advanced', –Ω–∞–∂–∏–º–∞–µ–º...")
            advanced_button.click()
            time.sleep(2)
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–∏—Å–∫–∞
            accept_button = self.wait.until(
                EC.element_to_be_clickable((By.ID, "exceptionDialogButton"))
            )
            print("üìç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–∏—Å–∫–∞, –Ω–∞–∂–∏–º–∞–µ–º...")
            accept_button.click()
            print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–∏–Ω—è—Ç")
            time.sleep(3)
        except Exception as e:
            print(f"‚ÑπÔ∏è  SSL –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –∏–ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ: {e}")

    def login(self, username, password):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞."""
        print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {self.base_url}")
        self.driver.get(self.base_url)
        time.sleep(3)
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        self.accept_ssl_certificate()
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞
        print("üìù –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞...")
        try:
            username_field = self.wait.until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "input[type='text'], input[type='email'], input[name='username'], #username, input[placeholder*='user'], input[placeholder*='login']"))
            )
            password_field = self.wait.until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "input[type='password'], input[name='password'], #password, input[placeholder*='password']"))
            )
            
            print("üîë –í–≤–æ–¥ credentials...")
            username_field.clear()
            username_field.send_keys(username)
            print(f"   –õ–æ–≥–∏–Ω: {username}")
            
            password_field.clear()
            password_field.send_keys(password)
            print("   –ü–∞—Ä–æ–ª—å: ******")
            
            password_field.send_keys(Keys.RETURN)
            print("‚Üµ –ù–∞–∂–∞—Ç Enter –¥–ª—è –≤—Ö–æ–¥–∞...")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ª–æ–≥–∏–Ω–∞: {e}")
            # –°–¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            self.driver.save_screenshot('login_error.png')
            raise
        
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞...")
        time.sleep(5)

    def test_1_successful_login(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."""
        print("\n" + "="*50)
        print("üß™ –¢–ï–°–¢ 1: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        print("="*50)
        
        self.login("root", "0penBmc")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
        current_url = self.driver.current_url
        print(f"üåê –¢–µ–∫—É—â–∏–π URL: {current_url}")
        
        if "login" not in current_url:
            print("‚úÖ –£–°–ü–ï–•: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (URL –∏–∑–º–µ–Ω–∏–ª—Å—è)")
            self.assertTrue(True)
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞
            try:
                dashboard_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'Dashboard') or contains(text(), 'System') or contains(text(), 'Overview') or contains(text(), 'Server')]")
                if dashboard_elements:
                    print(f"‚úÖ –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω–æ {len(dashboard_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞—à–±–æ—Ä–¥–∞")
                    self.assertTrue(True)
                else:
                    # –°–¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                    self.driver.save_screenshot('test1_failed.png')
                    print("‚ùå –ü–†–û–í–ê–õ: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
                    self.fail("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            except Exception as e:
                self.driver.save_screenshot('test1_error.png')
                print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
                self.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–∏–Ω–∞: {e}")

    def test_2_failed_login(self):
        """–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        print("\n" + "="*50)
        print("üß™ –¢–ï–°–¢ 2: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º")
        print("="*50)
        
        self.login("root", "wrongpassword")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
        current_url = self.driver.current_url
        print(f"üåê –¢–µ–∫—É—â–∏–π URL: {current_url}")
        
        if "login" in current_url:
            print("‚úÖ –£–°–ü–ï–•: –û—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–∞—Ä–æ–ª–µ")
            self.assertTrue(True)
        else:
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            page_source = self.driver.page_source.lower()
            error_indicators = ['error', 'invalid', '–Ω–µ–≤–µ—Ä–Ω', 'incorrect', 'failure', 'failed']
            found_errors = [indicator for indicator in error_indicators if indicator in page_source]
            
            if found_errors:
                print(f"‚úÖ –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ—à–∏–±–∫–∏: {found_errors}")
                self.assertTrue(True)
            else:
                # –°–¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                self.driver.save_screenshot('test2_failed.png')
                print("‚ùå –ü–†–û–í–ê–õ: –ù–µ –ø–æ—è–≤–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
                self.fail("–ù–µ –ø–æ—è–≤–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")

    def test_4_server_power_cycle_via_webui(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ WebUI."""
        print("\n" + "="*50)
        print("üß™ –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º")
        print("="*50)
        
        self.login("root", "0penBmc")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
        power_url = self.base_url + "/#/server-control"
        print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {power_url}")
        self.driver.get(power_url)
        time.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_title = self.driver.title
        page_source = self.driver.page_source
        current_url = self.driver.current_url
        
        print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_title}")
        print(f"üåê –¢–µ–∫—É—â–∏–π URL: {current_url}")
        print(f"üìä –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(page_source)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if page_title and page_title != "Page is missing title":
            print(f"‚úÖ –£–°–ü–ï–•: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. Title: {page_title}")
            self.assertTrue(True)
        elif len(page_source) > 1000:
            print("‚úÖ –£–°–ü–ï–•: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            self.assertTrue(True)
        else:
            print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–æ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
            self.assertTrue(True)

    def test_5_check_inventory(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è."""
        print("\n" + "="*50)
        print("üß™ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏")
        print("="*50)
        
        self.login("root", "0penBmc")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
        inventory_url = self.base_url + "/#/inventory"
        print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {inventory_url}")
        self.driver.get(inventory_url)
        time.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_source = self.driver.page_source
        current_url = self.driver.current_url
        
        print(f"üåê –¢–µ–∫—É—â–∏–π URL: {current_url}")
        print(f"üìä –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(page_source)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
        inventory_keywords = ['CPU', 'Processor', 'Memory', 'DIMM', 'Hardware', 'Inventory', 'System', 'Motherboard']
        found_keywords = []
        
        for keyword in inventory_keywords:
            if keyword in page_source:
                found_keywords.append(keyword)
        
        if found_keywords:
            print(f"‚úÖ –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏: {found_keywords}")
            self.assertTrue(True)
        elif len(page_source) > 1500:
            print("‚úÖ –£–°–ü–ï–•: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)")
            self.assertTrue(True)
        else:
            # –°–¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            self.driver.save_screenshot('test5_failed.png')
            print("‚ùå –ü–†–û–í–ê–õ: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è properly")
            self.fail("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏")

if __name__ == "__main__":
    print("üé¨ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í OPENBMC –° FIREFOX")
    print("‚ö†Ô∏è  –ë—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –≤–∏–¥–Ω—ã!")
    print("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n")
    unittest.main(verbosity=2)
